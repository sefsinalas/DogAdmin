{"version":3,"sources":["dashboard.js"],"names":[],"mappingsfile":"dashboard.js","sourcesContent":["$(function () {\n\n  'use strict';\n\n  /* ChartJS\n   * -------\n   * Here we will create a few charts using ChartJS\n   */\n\n  //-----------------------\n  //- MONTHLY SALES CHART -\n  //-----------------------\n\n  // Get context with jQuery - using jQuery's .get() method.\n  var salesChartCanvas = $(\"#salesChart\").get(0).getContext(\"2d\");\n  // This will get the first returned node in the jQuery collection.\n  var salesChart = new Chart(salesChartCanvas);\n\n  var salesChartData = {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [\n      {\n        label: \"Electronics\",\n        fillColor: \"rgb(210, 214, 222)\",\n        strokeColor: \"rgb(210, 214, 222)\",\n        pointColor: \"rgb(210, 214, 222)\",\n        pointStrokeColor: \"#c1c7d1\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgb(220,220,220)\",\n        data: [65, 59, 80, 81, 56, 55, 40]\n      },\n      {\n        label: \"Digital Goods\",\n        fillColor: \"rgba(60,141,188,0.9)\",\n        strokeColor: \"rgba(60,141,188,0.8)\",\n        pointColor: \"#3b8bba\",\n        pointStrokeColor: \"rgba(60,141,188,1)\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(60,141,188,1)\",\n        data: [28, 48, 40, 19, 86, 27, 90]\n      }\n    ]\n  };\n\n  var salesChartOptions = {\n    //Boolean - If we should show the scale at all\n    showScale: true,\n    //Boolean - Whether grid lines are shown across the chart\n    scaleShowGridLines: false,\n    //String - Colour of the grid lines\n    scaleGridLineColor: \"rgba(0,0,0,.05)\",\n    //Number - Width of the grid lines\n    scaleGridLineWidth: 1,\n    //Boolean - Whether to show horizontal lines (except X axis)\n    scaleShowHorizontalLines: true,\n    //Boolean - Whether to show vertical lines (except Y axis)\n    scaleShowVerticalLines: true,\n    //Boolean - Whether the line is curved between points\n    bezierCurve: true,\n    //Number - Tension of the bezier curve between points\n    bezierCurveTension: 0.3,\n    //Boolean - Whether to show a dot for each point\n    pointDot: false,\n    //Number - Radius of each point dot in pixels\n    pointDotRadius: 4,\n    //Number - Pixel width of point dot stroke\n    pointDotStrokeWidth: 1,\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n    pointHitDetectionRadius: 20,\n    //Boolean - Whether to show a stroke for datasets\n    datasetStroke: true,\n    //Number - Pixel width of dataset stroke\n    datasetStrokeWidth: 2,\n    //Boolean - Whether to fill the dataset with a color\n    datasetFill: true,\n    //String - A legend template\n    legendTemplate: \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].lineColor%>\\\"></span><%=datasets[i].label%></li><%}%></ul>\",\n    //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n    maintainAspectRatio: true,\n    //Boolean - whether to make the chart responsive to window resizing\n    responsive: true\n  };\n\n  //Create the line chart\n  salesChart.Line(salesChartData, salesChartOptions);\n\n  //---------------------------\n  //- END MONTHLY SALES CHART -\n  //---------------------------\n\n  //-------------\n  //- PIE CHART -\n  //-------------\n  // Get context with jQuery - using jQuery's .get() method.\n  var pieChartCanvas = $(\"#pieChart\").get(0).getContext(\"2d\");\n  var pieChart = new Chart(pieChartCanvas);\n  var PieData = [\n    {\n      value: 700,\n      color: \"#f56954\",\n      highlight: \"#f56954\",\n      label: \"Chrome\"\n    },\n    {\n      value: 500,\n      color: \"#00a65a\",\n      highlight: \"#00a65a\",\n      label: \"IE\"\n    },\n    {\n      value: 400,\n      color: \"#f39c12\",\n      highlight: \"#f39c12\",\n      label: \"FireFox\"\n    },\n    {\n      value: 600,\n      color: \"#00c0ef\",\n      highlight: \"#00c0ef\",\n      label: \"Safari\"\n    },\n    {\n      value: 300,\n      color: \"#3c8dbc\",\n      highlight: \"#3c8dbc\",\n      label: \"Opera\"\n    },\n    {\n      value: 100,\n      color: \"#d2d6de\",\n      highlight: \"#d2d6de\",\n      label: \"Navigator\"\n    }\n  ];\n  var pieOptions = {\n    //Boolean - Whether we should show a stroke on each segment\n    segmentShowStroke: true,\n    //String - The colour of each segment stroke\n    segmentStrokeColor: \"#fff\",\n    //Number - The width of each segment stroke\n    segmentStrokeWidth: 1,\n    //Number - The percentage of the chart that we cut out of the middle\n    percentageInnerCutout: 50, // This is 0 for Pie charts\n    //Number - Amount of animation steps\n    animationSteps: 100,\n    //String - Animation easing effect\n    animationEasing: \"easeOutBounce\",\n    //Boolean - Whether we animate the rotation of the Doughnut\n    animateRotate: true,\n    //Boolean - Whether we animate scaling the Doughnut from the centre\n    animateScale: false,\n    //Boolean - whether to make the chart responsive to window resizing\n    responsive: true,\n    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n    maintainAspectRatio: false,\n    //String - A legend template\n    legendTemplate: \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\",\n    //String - A tooltip template\n    tooltipTemplate: \"<%=value %> <%=label%> users\"\n  };\n  //Create pie or douhnut chart\n  // You can switch between pie and douhnut using the method below.\n  pieChart.Doughnut(PieData, pieOptions);\n  //-----------------\n  //- END PIE CHART -\n  //-----------------\n\n  /* jVector Maps\n   * ------------\n   * Create a world map with markers\n   */\n  $('#world-map-markers').vectorMap({\n    map: 'world_mill_en',\n    normalizeFunction: 'polynomial',\n    hoverOpacity: 0.7,\n    hoverColor: false,\n    backgroundColor: 'transparent',\n    regionStyle: {\n      initial: {\n        fill: 'rgba(210, 214, 222, 1)',\n        \"fill-opacity\": 1,\n        stroke: 'none',\n        \"stroke-width\": 0,\n        \"stroke-opacity\": 1\n      },\n      hover: {\n        \"fill-opacity\": 0.7,\n        cursor: 'pointer'\n      },\n      selected: {\n        fill: 'yellow'\n      },\n      selectedHover: {}\n    },\n    markerStyle: {\n      initial: {\n        fill: '#00a65a',\n        stroke: '#111'\n      }\n    },\n    markers: [\n      {latLng: [41.90, 12.45], name: 'Vatican City'},\n      {latLng: [43.73, 7.41], name: 'Monaco'},\n      {latLng: [-0.52, 166.93], name: 'Nauru'},\n      {latLng: [-8.51, 179.21], name: 'Tuvalu'},\n      {latLng: [43.93, 12.46], name: 'San Marino'},\n      {latLng: [47.14, 9.52], name: 'Liechtenstein'},\n      {latLng: [7.11, 171.06], name: 'Marshall Islands'},\n      {latLng: [17.3, -62.73], name: 'Saint Kitts and Nevis'},\n      {latLng: [3.2, 73.22], name: 'Maldives'},\n      {latLng: [35.88, 14.5], name: 'Malta'},\n      {latLng: [12.05, -61.75], name: 'Grenada'},\n      {latLng: [13.16, -61.23], name: 'Saint Vincent and the Grenadines'},\n      {latLng: [13.16, -59.55], name: 'Barbados'},\n      {latLng: [17.11, -61.85], name: 'Antigua and Barbuda'},\n      {latLng: [-4.61, 55.45], name: 'Seychelles'},\n      {latLng: [7.35, 134.46], name: 'Palau'},\n      {latLng: [42.5, 1.51], name: 'Andorra'},\n      {latLng: [14.01, -60.98], name: 'Saint Lucia'},\n      {latLng: [6.91, 158.18], name: 'Federated States of Micronesia'},\n      {latLng: [1.3, 103.8], name: 'Singapore'},\n      {latLng: [1.46, 173.03], name: 'Kiribati'},\n      {latLng: [-21.13, -175.2], name: 'Tonga'},\n      {latLng: [15.3, -61.38], name: 'Dominica'},\n      {latLng: [-20.2, 57.5], name: 'Mauritius'},\n      {latLng: [26.02, 50.55], name: 'Bahrain'},\n      {latLng: [0.33, 6.73], name: 'São Tomé and Príncipe'}\n    ]\n  });\n\n  /* SPARKLINE CHARTS\n   * ----------------\n   * Create a inline charts with spark line\n   */\n\n  //-----------------\n  //- SPARKLINE BAR -\n  //-----------------\n  $('.sparkbar').each(function () {\n    var $this = $(this);\n    $this.sparkline('html', {\n      type: 'bar',\n      height: $this.data('height') ? $this.data('height') : '30',\n      barColor: $this.data('color')\n    });\n  });\n\n  //-----------------\n  //- SPARKLINE PIE -\n  //-----------------\n  $('.sparkpie').each(function () {\n    var $this = $(this);\n    $this.sparkline('html', {\n      type: 'pie',\n      height: $this.data('height') ? $this.data('height') : '90',\n      sliceColors: $this.data('color')\n    });\n  });\n\n  //------------------\n  //- SPARKLINE LINE -\n  //------------------\n  $('.sparkline').each(function () {\n    var $this = $(this);\n    $this.sparkline('html', {\n      type: 'line',\n      height: $this.data('height') ? $this.data('height') : '90',\n      width: '100%',\n      lineColor: $this.data('linecolor'),\n      fillColor: $this.data('fillcolor'),\n      spotColor: $this.data('spotcolor')\n    });\n  });\n});\n"],"sourceRoot":"/source/"}